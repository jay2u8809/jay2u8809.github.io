<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jay2u8809.github.io/blog</id>
    <title>Dev.ian Lab Blog</title>
    <updated>2024-08-14T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jay2u8809.github.io/blog"/>
    <subtitle>Dev.ian Lab Blog</subtitle>
    <icon>https://jay2u8809.github.io/img/onigiri_favicon.jpg</icon>
    <entry>
        <title type="html"><![CDATA[AWS Cloudwatch - 로그를 간편하게 검색하는 방법]]></title>
        <id>https://jay2u8809.github.io/blog/2024-08-14-how-to-use-log-insights-query</id>
        <link href="https://jay2u8809.github.io/blog/2024-08-14-how-to-use-log-insights-query"/>
        <updated>2024-08-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">author</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Dev.ian</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">createdAt</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token datetime number" style="color:#36acaa">2024-05-21</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">updatedAt</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token datetime number" style="color:#36acaa">2024-08-14</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<blockquote>
<p>"AWS Cloudatch 의 Log Insights 를 이용해 Cloudwatch 의 Log 를 검색한다."</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="https://jay2u8809.github.io/blog/2024-08-14-how-to-use-log-insights-query#intro" class="hash-link" aria-label="Intro에 대한 직접 링크" title="Intro에 대한 직접 링크">​</a></h2>
<p>어플리케이션의 장애가 발생하거나 에러가 발생했을 때 또는 사용자User로부터의 문의를 받았을 때, 가장 먼저해야 할 일은? 당연히 로그Log를 찾아보는 일이다.</p>
<p>현재 운영 중인 서비스는 기본적으로 AWS 서비스(<code>API Gateway + AWS Lambda + DynamoDB</code>)를 이용한 Serverless 아키텍쳐 기반이다. 로그는 <strong>CloudWatch + S3</strong>를 이용해 저장하고 있다.</p>
<p>CloudWatch 는 실행한 AWS Lambda 의 인스턴스를 기준으로 로그를 기록하기 때문에 원하는 로그를 정확하게 검색하기가 어렵다. 때문에 <code>Log Insight</code> 라는 서비스를 이용하면, Query 를 이용해 간단하게 CloudWatch 로그를 검색할 수 있다.</p>
<p>이번 포스트에서는 CloudWatch 의 로그를 쉽게 검색하기 위한 <strong>Log Insight 의 사용 방법</strong> 을 정리한다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="cloudwatch-의-로그-구조">CloudWatch 의 로그 구조<a href="https://jay2u8809.github.io/blog/2024-08-14-how-to-use-log-insights-query#cloudwatch-%EC%9D%98-%EB%A1%9C%EA%B7%B8-%EA%B5%AC%EC%A1%B0" class="hash-link" aria-label="CloudWatch 의 로그 구조에 대한 직접 링크" title="CloudWatch ��의 로그 구조에 대한 직접 링크">​</a></h2>
<p>CloudWatch 는 로그를 로그 그룹(Log Group)과 로그 스트림(<code>Log Stream</code>)이라는 단위로 작성하고 저장한다. <strong>로그 그룹은 로그 스트림의 모음이며 로그스트림에 실제 로그가 기록</strong> 된다.</p>
<ul>
<li><a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html" target="_blank" rel="noopener noreferrer">로그 그룹 및 로그 스트림 작업</a></li>
</ul>
<p>Serverless Framwork 를 예를 들어 아래의 yaml 을 보면, exmple-service 에 해당하는 로그 그룹이 생성되고, exampleLambdaIndex, exampleLambdaStatistics 라는 Lambda 들(혹은 API Gateway 나 다른 리소스)이 실행될 때마다 각각의 로그 스트림을 만들어 로그를 저장한다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">service</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> example</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">service  </span><span class="token comment" style="color:#999988;font-style:italic"># Log Group Name: example-service-dev, example-service-prod, ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">provider</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> aws</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">region</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ap</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">northeast</span><span class="token punctuation" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">functions</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">exampleLambdaIndex</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># Log Stream</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">handler</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> path</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">exampleLambdaStatistics</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># Log Stream</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">handler</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> path</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="log-insight-를-사용해야하는-이유">Log Insight 를 사용해야하는 이유<a href="https://jay2u8809.github.io/blog/2024-08-14-how-to-use-log-insights-query#log-insight-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0" class="hash-link" aria-label="Log Insight 를 사용해야하는 이유에 대한 직접 링크" title="Log Insight 를 사용해야하는 이유에 대한 직접 링크">​</a></h2>
<p>문제는 이 로그 스트림을 이용해 원하는 로그를 확인하기 어렵다는 것이다.</p>
<p>AWS Lambda 의 경우, 로그 스트림은 lambda 가 실행된 인스턴스를 기준으로 생성된다. 1개의 lambda 인스턴스당 1개의 로그 스트림이 생성된다.</p>
<ol>
<li>
<p>lambda 가 실행되면서 1개의 로그 스트림을 만들고 로그를 작성한다.</p>
</li>
<li>
<p>1)의 처리가 끝나기 전에 또다시 리퀘스트가 있다면 다른 lambda 가 실행되고 별도의 로그 스트림을 만들어 로그를 작성한다.</p>
</li>
<li>
<p>1)의 처리가 끝난 뒤, lambda 인스턴스가 사라지기 전에 또 다른 리퀘스트가 있다면 1)의 lambda 인스턴스를 재실행하여 그 처리를 시작한다.(warm start)</p>
</li>
<li>
<p>3)의 경우, 1)의 lambda 인스터스를 그대로 사용하기에 새로운 로그 스트림을 만들지 않고 1)의 로그 스트림에 이어서 로그를 작성한다.</p>
</li>
<li>
<p>완전히 1)의 lambda 인스턴스가 종료된다면, 더이상 1)의 로그 스트림에는 로그가 작성되지 않는다.</p>
</li>
</ol>
<!-- -->
<p>이러한 흐름이기에 같은 시간 동안 실행(<em>병렬처리</em>)된 AWS Lambda 가 1000개라면 1000개의 로그 스트림이 있다고 볼 수 있다. 각각의 로그 스트림은 시간 순서대로 로그를 작성하지만 병렬처리로 동시에 작성된 로그 스트림이 많다면 이를 하나하나 찾아보는건 불가능에 가깝다.</p>
<p>이렇게 AWS Lambda 의 병렬처리로 생성된 수많은 <strong>로그들을 쿼리Query로 간편하게 검색할 수 있는 서비스가 Log Insight</strong> 이다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="log-insights-query">Log Insights Query<a href="https://jay2u8809.github.io/blog/2024-08-14-how-to-use-log-insights-query#log-insights-query" class="hash-link" aria-label="Log Insights Query에 대한 직접 링크" title="Log Insights Query에 대한 직접 링크">​</a></h2>
<p>Log Insights 는 AWS CloudWatch 콘솔에서 사용할 수 있다. 찾고자 하는 로그의 로그 그룹과 시간을 지정한 뒤, 아래와 같은 쿼리를 이용하면 로그를 손쉽게 검색할 수 있다.</p>
<p>좀더 자세한 내용은 <a href="https://jay2u8809.github.io/docs/aws/tips/how-to-use-log-insights-query">AWS Cloudwatch - Log Insights 검색 쿼리</a>에서 확인할 수 있다.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  filter @message like /${SEARCH_KEYWORD}/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    | sort @timestamp desc</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="주의점">주의점<a href="https://jay2u8809.github.io/blog/2024-08-14-how-to-use-log-insights-query#%EC%A3%BC%EC%9D%98%EC%A0%90" class="hash-link" aria-label="주의점에 대한 직접 링크" title="주의점에 대한 직접 링크">​</a></h2>
<p>Log Insights 는 AWS가 제공하는 서비스이다. 따라서 검색 용량에 따른 비용이 발생한다.</p>
<ul>
<li><a href="https://blog.awsfundamentals.com/understanding-aws-cloudwatch-pricing-a-comprehensive-guide" target="_blank" rel="noopener noreferrer">Understanding AWS CloudWatch Pricing: A Comprehensive Guide</a></li>
</ul>
<p>또한 검색할 수 있는 데이터의 양도 최대 10,000개의 제한이 있다.</p>
<ul>
<li><a href="https://medium.com/@aishwaryaicerastogi/breaking-the-barrier-resolving-the-10k-log-insights-limit-in-cloudwatch-and-consolidating-records-92b206006e8" target="_blank" rel="noopener noreferrer">“Breaking the Barrier: Resolving the 10K Log Insights Limit in CloudWatch and Consolidating Records into a CSV”</a></li>
</ul>]]></content>
        <author>
            <name>Dev.ian</name>
            <uri>https://github.com/jay2u8809</uri>
        </author>
        <category label="devian-lab" term="devian-lab"/>
        <category label="dev.ian" term="dev.ian"/>
        <category label="Jobː談" term="Jobː談"/>
        <category label="blog" term="blog"/>
        <category label="aws" term="aws"/>
        <category label="cloudwatch" term="cloudwatch"/>
        <category label="log" term="log"/>
        <category label="loginsight" term="loginsight"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS Lambda - Code Storage Limit 해결방법]]></title>
        <id>https://jay2u8809.github.io/blog/2024-06-26-how-to-set-prune-plugin</id>
        <link href="https://jay2u8809.github.io/blog/2024-06-26-how-to-set-prune-plugin"/>
        <updated>2024-06-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">author</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Dev.ian</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">createdAt</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token datetime number" style="color:#36acaa">2024-06-26</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">updatedAt</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token datetime number" style="color:#36acaa">2024-08-14</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<blockquote>
<p>"Serverless Framework 의 Prune Plugin 으로 AWS Lambda 의 Code Storage Limit 을 해결한다."</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="https://jay2u8809.github.io/blog/2024-06-26-how-to-set-prune-plugin#intro" class="hash-link" aria-label="Intro에 대한 직접 링크" title="Intro에 대한 직접 링크">​</a></h2>
<p>AWS 를 이용한 Serverless 아키텍쳐로 서비스를 운영한다면 AWS Lambda 를 반드시 쓰게 된다. AWS Lambda 는 가장 간편하고 저렴하며 활용도가 높은 서비스 중 하나이기에 다양한 처리에 사용할 수 있다.</p>
<p>지금 운영 중인 서비스에서는 크게 아래와 같이 3가지 용도로 AWS Lambda 를 사용하고 있다.</p>
<blockquote>
<ol>
<li>15분 이내의 간단한 배치Batch 처리</li>
<li>"API Gateway + AWS Lambda" 조합으로 Web Server 로 활용</li>
<li>Step Function 이나 다른 AWS 리소스의 이벤트 전후처리(Cloudfront Edge Function, S3 이미지 업로드 시 썸네일 생성 등) 같은 트랜잭션의 한 부분으로 활용</li>
</ol>
</blockquote>
<p>이렇듯 활용도가 높은 AWS Lambda 이기에 넋 놓고 쓰다보면 금방 코드 스토리지가 부족해질 수 있다.</p>
<ul>
<li>AWS Lambda 의 코드 스토리지는 <code>75GB</code>이다.<!-- -->
<ul>
<li>Refs: <a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#compute-and-storage" target="_blank" rel="noopener noreferrer">Lambda quotas</a></li>
</ul>
</li>
</ul>
<p>실제로 최근에 Serverless Framework(<em>이하 sls</em>) 로 deploy 하던 중 <code>Code storage limit exceeded</code> 에러가 났다. 이번 기회에 AWS Lambda 의 코드 스토리지를 효율적으로 관리할 수 있도록 sls 설정을 하고 그 방법에 대해 정리해 본다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="aws-lambda-code-storage">AWS Lambda Code Storage?<a href="https://jay2u8809.github.io/blog/2024-06-26-how-to-set-prune-plugin#aws-lambda-code-storage" class="hash-link" aria-label="AWS Lambda Code Storage?에 대한 직접 링크" title="AWS Lambda Code Storage?에 대한 직접 링크">​</a></h2>
<p>AWS Lambda 는 소스코드를 컨테이너Container를 통해 바로 실행하는 구조이기에 <strong>소스코드 (<em>직접 코딩한 소스코드 및 의존성 코드</em>) 를 업로드해둘 스토리지</strong> 가 필요하다. 이 저장 공간을 <code>코드 스토리지code storage</code> 라 한다.</p>
<p>AWS Lambda 서비스에서 제공하는 코드 스토리지는 <strong>75GB</strong> 이고 이 스토리지 용량을 모두 사용하면 소스코드를 업로드할 때 아래와 같은 에러가 발생한다. (※ <a href="https://docs.aws.amazon.com/lambda/latest/operatorguide/code-storage.html" target="_blank" rel="noopener noreferrer">Monitoring Lambda code storage</a>)</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  Code storage limit exceeded. (Service: Lambda, Status Code: 400, ...)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="해결-방법">해결 방법<a href="https://jay2u8809.github.io/blog/2024-06-26-how-to-set-prune-plugin#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95" class="hash-link" aria-label="해결 방법에 대한 직접 링크" title="해결 방법에 대한 직접 링크">​</a></h2>
<p>sls 로 AWS Lambda 를 Deploy 하던 중 발생한 <code>Code storage limit exceeded</code> 에러를 어떻게 해결해야할까? 우리 팀에서 해결한 방법을 차례로 설명해 본다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-코드-스토리지-용량-확보">1) 코드 스토리지 용량 확보<a href="https://jay2u8809.github.io/blog/2024-06-26-how-to-set-prune-plugin#1-%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%9A%A9%EB%9F%89-%ED%99%95%EB%B3%B4" class="hash-link" aria-label="1) 코드 스토리지 용량 확보에 대한 직접 링크" title="1) 코드 스토리지 용량 확보에 대한 직접 링크">​</a></h3>
<p>코드 스토리지의 용량이 부족하기 때문에 가장 먼저 한 일은 <em>스토리지 용량 확보</em> 이다. 필요없는 람다 함수Lambda Function 를 찾아 삭제하거나 각 람다 함수의 버전Version을 확인해 오래된 버전이 많이 존재한다면 그 버전들을 삭제하는 작업을 진행했다.</p>
<ul>
<li>필요없는(사용하지 않는) 람다 함수 삭제</li>
<li>람다 함수의 오래된 버전 삭제</li>
</ul>
<p>조사 결과 필요없는 람다 함수는 없었기에 <em>"람다 함수의 오래된 버전 삭제"</em> 만 진행했다. 이 작업은 팀의 시니어 엔지니어분께서 AWS CLI 를 이용해 수동으로 하나하나 삭제해가며 진행했다.</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  $ aws lambda delete-function \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --function-name ${LAMBDA_FUNCTION_NAME} \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --qualifier ${LAMBDA_FUNCTION_VERSION}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><a href="https://docs.aws.amazon.com/cli/latest/reference/lambda/delete-function.html" target="_blank" rel="noopener noreferrer">AWS CLI - delete-function</a></li>
</ul>
<p>그리고 이 작업은 한 번이라도 sls 로 deploy 가 가능해질만큼의 용량을 확보할 때까지 계속되었다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-lambda-function-version">※ Lambda Function Version<a href="https://jay2u8809.github.io/blog/2024-06-26-how-to-set-prune-plugin#-lambda-function-version" class="hash-link" aria-label="※ Lambda Function Version에 대한 직접 링크" title="※ Lambda Function Version에 대한 직접 링크">​</a></h3>
<p>AWS Lambda 의 콘솔에서 아무 함수Function를 선택해보면 <code>버전Version</code> 이라는 탭이 있다. 이 <strong>"버전"이 이번 코드 스토리지를 가득 차게 한 원인</strong> 이었다.</p>
<p><em>sls 로 새로운 소스코드를 deploy 할 때, AWS Lambda는 버전이라는 형태로 파일을 생성해 코드 스토리지에 저장</em> 한다. 특별한 설정이 없다면, sls 로 <strong>deploy 할 때마다 매번 새로운 버전의 파일을 생성하고 저장</strong> 한다. (과거의 버전을 그대로 deploy 해서 Rollback 할 수 있는 기능)</p>
<ul>
<li>5MB 크기의 소스코드를 30번 deploy 했다면 5MB * 30회, 총 150MB를 저장하게 된다.</li>
</ul>
<p>지금껏 한 번도 이 버전 파일들을 따로 관리한 적이 없었다. 서비스 초반에 만든 어떤 람다함수는 버전 파일만 300개가 넘었다. 이러한 버전 파일들이 쌓이고 쌓여 75GB 의 코드 스토리지를 가득차게 했다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-serverless-framework-설정">2) Serverless Framework 설정<a href="https://jay2u8809.github.io/blog/2024-06-26-how-to-set-prune-plugin#2-serverless-framework-%EC%84%A4%EC%A0%95" class="hash-link" aria-label="2) Serverless Framework 설정에 대한 직접 링크" title="2) Serverless Framework 설정에 대한 직접 링크">​</a></h3>
<p>sls 로 AWS Lambda 를 deploy 할 수 있을만큼의 최소한의 코드 스토리지의 용량을 확보했다면, sls 의 플러그인Plugin을 이용해 필요없는 버전 파일을 모두 삭제할 수 있도록 했다.</p>
<ul>
<li><a href="https://www.serverless.com/plugins/serverless-prune-plugin" target="_blank" rel="noopener noreferrer">Serverless Prune Plugin</a></li>
</ul>
<p>이 플러그인은 sls 로 deploy 하고 난 뒤, <strong>설정한 갯수의 버전 파일만 남겨두고 모든 버전 파일들을 삭제</strong> 한다. sls 로 deploy 할 때마다 오래된 버전 파일을 삭제하기 때문에 앞으로는 오래된 버전 파일들이 쌓여 코드 스토리지를 차지하지 않도록 할 수 있다. 지속적으로 관리할 수 있기에 가장 좋은 방법이라 생각한다.</p>
<p>이 플러그인의 설정 방법은 <a href="https://jay2u8809.github.io/docs/aws/serverless-framework/how-to-set-prune-plugin">Prune Plugin: AWS Lambda Storage Limit Error</a> 에서 확인 할 수 있다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-deploy">3) Deploy<a href="https://jay2u8809.github.io/blog/2024-06-26-how-to-set-prune-plugin#3-deploy" class="hash-link" aria-label="3) Deploy에 대한 직접 링크" title="3) Deploy에 대한 직접 링크">​</a></h3>
<p>시험 삼아 1개의 Sereverless Framework 설정 파일(YAML)에 Serverless Prune Plugin을 설정하고 sls 로 deploy 했다. 예상대로 오래된 버전의 파일들이 모두 삭제되었다. 나머지 Sereverless Framework 설정 파일(YAML)에도 플러그인을 설정하고 모두 deploy 를 해서 오래된 버전 파일들을 삭제했다. 개발환경(Dev)의 람다함수들의 deploy 횟수가 많았었기에 개발환경만 deploy 해도 상당한 양의 코드 스토리지를 확보할 수 있었다.</p>
<ul>
<li>75GB -&gt; 22GB</li>
</ul>
<p>75GB를 가득채웠던 코드 스토리지 사용 용량이 22GB로 여유로워졌다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://jay2u8809.github.io/blog/2024-06-26-how-to-set-prune-plugin#conclusion" class="hash-link" aria-label="Conclusion에 대한 직접 링크" title="Conclusion에 대한 직접 링크">​</a></h2>
<p>AWS Lambda 를 Deploy 할 때, 버전을 생성하지 않도록 하는 설정이나 방법에 대한 논의도 있었으나 최종적으로는 지금처럼 플러그인을 이용한 방법을 유지하는 것으로 결론이 났다.</p>
<p>이유는 버전을 생성하지 않는 설정이나 방법이 Serverless Framework 를 이용한 방법이 아니라면 따로 문서를 만들어 내용을 관리해야 하기 때문이고 Serverless Framework 를 이용할 수 있는 방법이라도 현재의 플러그인을 이용한 방법과 중복되기 때문이다. 우리 팀은 인프라에 관한 내용은 YAML 파일 자체가 문서로서의 기능을 하기 때문에 최대한 YAML 파일을 통해서만 관리하고 싶어한다.</p>
<p>다소 당황스러운 상황이었지만, 이번 기회를 통해 AWS Lambda 의 버전과 코드 스토리지에 대한 내용을 공부할 수 있어서 좋은 경험이었다.</p>
<br>
<br>
<br>
<br>
<br>
<hr>
<ul>
<li>Refs<!-- -->
<ul>
<li><a href="https://qiita.com/spring_i/items/40cfc99504d26b0834cc" target="_blank" rel="noopener noreferrer">【ServerlessFramework】LambdaがCode storage limit exceededになってしまった時の対処法</a></li>
<li><a href="https://dev.classmethod.jp/articles/lambda-error-storage-limit" target="_blank" rel="noopener noreferrer">Lambdaの関数とレイヤーのストレージがデフォルト上限（75GB）に達してしまった時に対応したこと</a></li>
<li><a href="https://stackoverflow.com/questions/51722526/aws-serverless-code-storage-limit-exceeded" target="_blank" rel="noopener noreferrer">AWS Serverless | Code storage limit exceeded</a></li>
<li><a href="https://docs.aws.amazon.com/cli/latest/reference/lambda/delete-function.html" target="_blank" rel="noopener noreferrer">AWS CLI - Delete Functions</a></li>
<li><a href="https://qiita.com/tcsh/items/dc4592c2f73e64eb9f10" target="_blank" rel="noopener noreferrer">[JAWS-UG CLI] Lambda:#8 バージョンの削除</a></li>
</ul>
</li>
</ul>]]></content>
        <author>
            <name>Dev.ian</name>
            <uri>https://github.com/jay2u8809</uri>
        </author>
        <category label="devian-lab" term="devian-lab"/>
        <category label="dev.ian" term="dev.ian"/>
        <category label="Jobː談" term="Jobː談"/>
        <category label="blog" term="blog"/>
        <category label="aws" term="aws"/>
        <category label="lambda" term="lambda"/>
        <category label="serverless" term="serverless"/>
        <category label="serverless framework" term="serverless framework"/>
        <category label="code storage limit exceeded" term="code storage limit exceeded"/>
        <category label="prune" term="prune"/>
        <category label="코드스토리지" term="코드스토리지"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS Lambda - Webpack 으로 Upload Size Limit 해결하기]]></title>
        <id>https://jay2u8809.github.io/blog/2024-05-28-how-to-set-webpack</id>
        <link href="https://jay2u8809.github.io/blog/2024-05-28-how-to-set-webpack"/>
        <updated>2024-05-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">author</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Dev.ian</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">createdAt</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token datetime number" style="color:#36acaa">2024-05-28</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">updatedAt</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token datetime number" style="color:#36acaa">2024-08-16</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<blockquote>
<p>"Webpack 을 적용하여 AWS Lambda 에 업로드할 소스코드의 사이즈를 줄여본다"</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="https://jay2u8809.github.io/blog/2024-05-28-how-to-set-webpack#intro" class="hash-link" aria-label="Intro에 대한 직접 링크" title="Intro에 대한 직접 링크">​</a></h2>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  Unzipped size must be smaller than 262144000 bytes</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>최근에 Serverless Framework(이하 <code>sls</code>)로 AWS Lambda 를 Deploy 하면서 나온 에러 메세지다. AWS Lambda 에 업로드할 소스코드의 용량이 (압축하지 않았을 경우에) 약 250MB 보다 적어야 한다는 것이다.</p>
<p>현재 우리 팀의 서비스는 AWS Lambda 와 ECS Fargate 에 Nest.js 프로젝트를 올려 운영하고 있다. ECS Fargate 는 특별히 소스코드 용량 제한이 없지만 AWS Lambda 는 여러가지 용량 제한이 있다.</p>
<ul>
<li><a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#function-configuration-deployment-and-execution" target="_blank" rel="noopener noreferrer">Lambda quotas - Function configuration, deployment, and execution</a>
<ul>
<li>AWS Lambda 에 직접 올릴수 없는 용량이 큰 파일을 S3에 업로드하게 되는데 <strong>50MB(압축했을 경우)</strong> 또는 <strong>250MB(압축하지 않았을 경우)</strong> 이하여야한다.</li>
</ul>
</li>
</ul>
<p>이번 포스트에서는 Webpack 을 이용해 Nest.js 프로젝트의 소스코드 사이즈를 줄이는 방법에 대해 정리해본다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소스코드의-용량이-늘어난-이유">소스코드의 용량이 늘어난 이유<a href="https://jay2u8809.github.io/blog/2024-05-28-how-to-set-webpack#%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C%EC%9D%98-%EC%9A%A9%EB%9F%89%EC%9D%B4-%EB%8A%98%EC%96%B4%EB%82%9C-%EC%9D%B4%EC%9C%A0" class="hash-link" aria-label="소스코드의 용량이 늘어난 이유에 대한 직접 링크" title="소스코드의 용량이 늘어난 이유에 대한 직접 링크">​</a></h2>
<p>서비스가 성장하면서 추가한 기능만큼 소스코드도 늘어났지만, 가장 큰 원인은 업로드할 파일에 필요없는 내용이 많은 것이었다.</p>
<p>우리 팀의 프로젝트 구조를 간략히 설명하자면 1개의 Nest.js 프로젝트 내에서 여러가지 마이크로 서비스들을 각각 deploy 하는 방식으로 MSA를 구현하고 있다. 각 마이크로 서비스마다 각각의 Nest.js Application 과 Module 을 통해 필요한 기능들만 import 해서 사용하고 있지만, 의존성Dependencies(<code>node_modules</code>)은 공통이다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">functions</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">exampleLambdaIndex</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">handler</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">PATH</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">.handler</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">package</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">patterns</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'!**'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> dist/</span><span class="token important">**</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># js transfer result</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> node_modules/</span><span class="token important">**</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># all of dependencies</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">individually</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>가령 A, B, C 라는 의존성이 있을 때, "회원 서비스"에서는 A, C 만 사용하더라도 회원 서비스를 deploy 할 때에는 node_modules 디렉토리에 있는 모든 의존성(A, B, C)을 업로드하는 것이다. 이렇다보니 서비스 초창기에는 별 문제 없었지만, 서비스가 성장하고 소스코드와 의존성이 늘어나면서 이제 더이상은 업로드할 수 없는 상황까지 오게 되었다.</p>
<p>Lambda Layer를 사용해 공통 의존성들을 따로 관리하고 있음에도 이러한 문제가 발생해 막막했다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="webpack-을-사용하는-이유">Webpack 을 사용하는 이유<a href="https://jay2u8809.github.io/blog/2024-05-28-how-to-set-webpack#webpack-%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0" class="hash-link" aria-label="Webpack 을 사용하는 이유에 대한 직접 링크" title="Webpack 을 사용하는 이유에 대한 직접 링크">​</a></h2>
<p>웹팩Webpack은 필요없는(사용하지 않는) 코드를 없앨수 있다. 각 마이크로 서비스에 실제 사용되는 소스코드와 의존성만을 이용해 결과물을 만들어 낸다. 그렇기 때문에 필요없는 코드들을 없앨 수 있고 실제 기능에 필요한 코드만을 업로드할 수 있도록 한다.</p>
<p>위에서 예를 든 "회원 서비스"에서 사용하지 않는 B 의존성을 제거할 수 있다. 필요없는 의존성을 제거할 수 있기에 소스코드의 용량을 획기적으로 줄일수 있을 것이라 생각했다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="nestjs-webpack">Nest.js Webpack<a href="https://jay2u8809.github.io/blog/2024-05-28-how-to-set-webpack#nestjs-webpack" class="hash-link" aria-label="Nest.js Webpack에 대한 직접 링크" title="Nest.js Webpack에 대한 직접 링크">​</a></h2>
<p>다양한 웹팩 툴들이 있었지만 Nest.js 의 웹팩 옵션을 사용해 빌드하는 방식을 선택했다. 웹팩을 적용할 때 가장 중요한 조건 중 하나가 Nest.js 와의 호환성이었는데, Nest.js 에서 웹팩을 지원하고 있다면 그 방법이 최선이라고 생각했다.</p>
<ul>
<li><a href="https://docs.nestjs.com/cli/monorepo#webpack-options" target="_blank" rel="noopener noreferrer">Nest.js-Webpack Options</a></li>
<li><a href="https://webpack.js.org/configuration/" target="_blank" rel="noopener noreferrer">Webpack Configuration</a></li>
</ul>
<p><code>package.json</code> 파일에 웹팩을 적용해 빌드하도록 설정하고, 웹팩 설정을 위해 <code>webpack.config.js</code> 파일을 만들었다. 좀 더 자세한 내용은 <a href="https://jay2u8809.github.io/docs/aws/serverless-framework/how-to-set-webpack-multiple-entry">Nest.js Webpack 적용 방법</a>에서 확인할 수 있다.</p>
<ul>
<li>
<p>package.json</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  "scripts": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "build": "nest build --webpack --webpackPath ${PATH}/webpack.config.js"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>webpack.config.js</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method-variable function-variable method function property-access" style="color:#d73a49">exports</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">options</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> webpack</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">entry</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">./src/</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation constant" style="color:#36acaa">NESTJS_APP_PATH</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">externals</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">output</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">output</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">clean</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">libraryTarget</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'commonjs2'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">plugins</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">plugins</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">webpack</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">optimize</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">LimitChunkCountPlugin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token literal-property property" style="color:#36acaa">maxChunks</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="mainjs">main.js<a href="https://jay2u8809.github.io/blog/2024-05-28-how-to-set-webpack#mainjs" class="hash-link" aria-label="main.js에 대한 직접 링크" title="main.js에 대한 직접 링크">​</a></h3>
<p>웹팩을 적용해 Nest.js 를 빌드하면 <code>dist</code> 디렉토리에 <strong>main.js</strong> 파일이 생성된다. 이 파일은 <em>웹팩이 적용된 빌드 결과 파일</em> 이다. 파일을 확인해보면 의존성을 포함한 관련 소스코드가 1개의 파일로 만들어져 있다.</p>
<ul>
<li>main.js 라는 이름은 변경할 수 있으며 기본값이 main.js 이다.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="serverless-framework-yaml">Serverless Framework YAML<a href="https://jay2u8809.github.io/blog/2024-05-28-how-to-set-webpack#serverless-framework-yaml" class="hash-link" aria-label="Serverless Framework YAML에 대한 직접 링크" title="Serverless Framework YAML에 대한 직접 링크">​</a></h2>
<p>Nest.js 프로젝트에 웹팩을 적용했다면 웹팩이 적용된 파일을 deploy 할 수있도록 해야한다. package.json 와 sls YAML 파일을 아래와 같이 수정한다.</p>
<ul>
<li>
<p>package.json</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  "scripts": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "deploy:example": "nest build --webpack --webpackPath ${PATH}/webpack.config.js &amp;&amp; sls deploy -c ./${YAML_PATH}/serverless.yaml"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>YAML</p>
<ul>
<li>main.js 파일을 그대로 업로드 하는 방식이기에 더 이상 Lambda Layer 를 사용하지 않는다.</li>
</ul>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">functions</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">exampleLambdaIndex</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">handler</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> dist/main.handler  </span><span class="token comment" style="color:#999988;font-style:italic"># main.js 의 handler 함수</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">package</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">patterns</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'!**'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> dist/main.js </span><span class="token comment" style="color:#999988;font-style:italic"># webpack result</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">individually</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<p>웹팩 적용을 끝내고 deploy 해보면 문제 없이 소스코드가 업로드되는 것을 확인할 수 있다.</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  $ npm run deploy:example</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://jay2u8809.github.io/blog/2024-05-28-how-to-set-webpack#conclusion" class="hash-link" aria-label="Conclusion에 대한 직접 링크" title="Conclusion에 대한 직접 링크">​</a></h2>
<ul>
<li>250MB -&gt; 15MB</li>
</ul>
<p>웹팩을 적용함으로서 deploy 할 때 업로드할 소스코드의 양을 대폭 줄일 수 있었다. 기존의 방식은 프로젝트의 소스코드(<code>dist</code>)와 의존성(<code>node_module</code>)을 모두 업로드하는 방식이었기에 250MB가 넘어가는 용량이었지만 웹팩을 통해 약 15MB 정도의 main.js 만 업로드하는 방식으로 바꾸었다. 이를 통해 S3 의 저장용량도 줄일 수 있었다. (AWS Lambda 의 소스코드는 일정 용량 이상인 경우 S3 에 업로드 된다.)</p>
<ul>
<li>Build 필수</li>
</ul>
<p>sls 는 deploy 할 때, <code>patterns</code> 에 지정한 파일들을 그대로 패키징해 업로드한다. 빌드여부는 중요하지 않다. 그래서 가끔 코드를 수정한 뒤, build 를 하지 않고 deploy 했던 경우가 있었다. 그러면 수정 내용이 전혀 반영되지 않는다. webpack 처리를 위해 반드시 build 를 해야하기에 build 가 되지 않은 코드가 deploy 하는 일이 없어졌다.</p>
<ul>
<li>Build 시간 증가</li>
</ul>
<p>아쉬운 점은 이를 통해 build 시간이 꽤나 길어졌다는 것이다. webpack 을 적용하는 시간이 걸리면서 약 30초 이상, 경우에 따라서는 약 3분 이상 build 시간이 늘어났다. build 시간은 단축 할 수 있는 다른 툴들도 알아봐야할 필요가 생겼다.</p>]]></content>
        <author>
            <name>Dev.ian</name>
            <uri>https://github.com/jay2u8809</uri>
        </author>
        <category label="devian-lab" term="devian-lab"/>
        <category label="dev.ian" term="dev.ian"/>
        <category label="Jobː談" term="Jobː談"/>
        <category label="blog" term="blog"/>
        <category label="aws" term="aws"/>
        <category label="lambda" term="lambda"/>
        <category label="serverless" term="serverless"/>
        <category label="serverless framework" term="serverless framework"/>
        <category label="webpack" term="webpack"/>
        <category label="multiple entry" term="multiple entry"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intro]]></title>
        <id>https://jay2u8809.github.io/blog/intro</id>
        <link href="https://jay2u8809.github.io/blog/intro"/>
        <updated>2024-03-31T14:08:32.000Z</updated>
        <author>
            <name>Onigiri.J</name>
            <uri>https://github.com/jay2u8809</uri>
        </author>
        <category label="devian-lab" term="devian-lab"/>
        <category label="blog" term="blog"/>
    </entry>
</feed>