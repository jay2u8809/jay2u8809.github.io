"use strict";(self.webpackChunkonigiri=self.webpackChunkonigiri||[]).push([[1782],{6101:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>t,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=r(4848),o=r(8453);const s={id:"how-to-convert-map-to-array",title:"Map -> Array \ubcc0\ud658\ud558\uae30",tags:["de.log","wiki","nodejs","js","javascript","ts","typescript","map","array","convert"]},t="[JS] Map -> Array \ubcc0\ud658\ud558\uae30",i={id:"nodejs/how-to-convert-map-to-array",title:"Map -> Array \ubcc0\ud658\ud558\uae30",description:"Array.from()",source:"@site/onigiri/delog/nodejs/how-to-convert-map-to-array.md",sourceDirName:"nodejs",slug:"/nodejs/how-to-convert-map-to-array",permalink:"/onigiri/delog/nodejs/how-to-convert-map-to-array",draft:!1,unlisted:!1,tags:[{label:"de.log",permalink:"/onigiri/delog/tags/de-log"},{label:"wiki",permalink:"/onigiri/delog/tags/wiki"},{label:"nodejs",permalink:"/onigiri/delog/tags/nodejs"},{label:"js",permalink:"/onigiri/delog/tags/js"},{label:"javascript",permalink:"/onigiri/delog/tags/javascript"},{label:"ts",permalink:"/onigiri/delog/tags/ts"},{label:"typescript",permalink:"/onigiri/delog/tags/typescript"},{label:"map",permalink:"/onigiri/delog/tags/map"},{label:"array",permalink:"/onigiri/delog/tags/array"},{label:"convert",permalink:"/onigiri/delog/tags/convert"}],version:"current",frontMatter:{id:"how-to-convert-map-to-array",title:"Map -> Array \ubcc0\ud658\ud558\uae30",tags:["de.log","wiki","nodejs","js","javascript","ts","typescript","map","array","convert"]},sidebar:"delogSidebar",previous:{title:"NodeJs",permalink:"/onigiri/delog/category/nodejs-1"},next:{title:"NodeJs \u30e1\u30e2\u30ea\u30fc\u30b5\u30a4\u30ba\u30a2\u30c3\u30d7",permalink:"/onigiri/delog/nodejs/how-to-increase-nodejs-default-memory-ja"}},l={},p=[{value:"Array.from()",id:"arrayfrom",level:2},{value:"[...]",id:"",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",hr:"hr",li:"li",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"js-map---array-\ubcc0\ud658\ud558\uae30",children:"[JS] Map -> Array \ubcc0\ud658\ud558\uae30"}),"\n",(0,a.jsx)(e.h2,{id:"arrayfrom",children:"Array.from()"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"  let map: Map<string, string> = new Map<string, string>()\n    .set('apple', 'ios')\n    .set('google', 'android')\n    .set('ms', 'windows');\n\n  const arr = Array.from(map, ([name, os]) => ({name, os}));\n  \n  console.log(arr);\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"  let map: Map<string, string> = new Map<string, string>()\n    .set('apple', 'ios')\n    .set('google', 'android')\n    .set('ms', 'windows');\n\n  const arr = Array.from(map, ([key, value]) => ({name: key, os: value}));\n  \n  console.log(arr);\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'  [{\n    "name": "apple",\n    "os": "ios"\n  }, {\n    "name": "google",\n    "os": "android"\n  }, {\n    "name": "ms",\n    "os": "windows"\n  }] \n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"  let map: Map<string, string> = new Map<string, string>()\n    .set('apple', 'ios')\n    .set('google', 'android')\n    .set('ms', 'windows');\n\n  const arr = Array.from(map, ([key, value]) => ({[key]: value}));\n  \n  console.log(arr);\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'  [{\n    "apple": "ios"\n  }, {\n    "google": "android"\n  }, {\n    "ms": "windows"\n  }] \n'})}),"\n",(0,a.jsx)(e.h2,{id:"",children:"[...]"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"  let map: Map<string, string> = new Map<string, string>()\n    .set('apple', 'ios')\n    .set('google', 'android')\n    .set('ms', 'windows');\n\n  const arr = [...map].map(([name, os]) => ({name, os}));\n  \n  console.log(arr);\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"  let map: Map<string, string> = new Map<string, string>()\n    .set('apple', 'ios')\n    .set('google', 'android')\n    .set('ms', 'windows');\n\n  const arr = [...map].map(([key, value]) => ({name: key, os: value}));\n  \n  console.log(arr);\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'  [{\n    "name": "apple",\n    "os": "ios"\n  }, {\n    "name": "google",\n    "os": "android"\n  }, {\n    "name": "ms",\n    "os": "windows"\n  }] \n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"  let map: Map<string, string> = new Map<string, string>()\n    .set('apple', 'ios')\n    .set('google', 'android')\n    .set('ms', 'windows');\n\n  const arr = [...map].map(([key, value]) => ({[key]: value}));\n  \n  console.log(arr);\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'  [{\n    "apple": "ios"\n  }, {\n    "google": "android"\n  }, {\n    "ms": "windows"\n  }] \n'})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Refs:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"https://stackoverflow.com/questions/56795743/how-to-convert-map-to-array-of-object",children:"StackOverflow-How to convert Map to array of object?"})}),"\n"]}),"\n"]}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>t,x:()=>i});var a=r(6540);const o={},s=a.createContext(o);function t(n){const e=a.useContext(s);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:t(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);